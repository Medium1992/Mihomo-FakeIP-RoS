name: Cleanup untagged GHCR packages (multi-arch safe)

on:
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PACKAGE_OWNER: medium1992
      PACKAGE_NAME: mihomo-fakeip-ros
      DELETE_UNTAGGED: "false" # true ‚Äî —Ä–µ–∞–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Analyze GHCR packages
        run: |
          set -e

          echo "Fetching package versions for ${PACKAGE_OWNER}/${PACKAGE_NAME}..."
          packages_json=$(gh api -H "Accept: application/vnd.github+json" \
            /users/${PACKAGE_OWNER}/packages/container/${PACKAGE_NAME}/versions?per_page=100)

          total=$(echo "$packages_json" | jq length)
          echo "Total versions found: $total"
          echo ""

          declare -A protected_digests
          declare -A child_digests  # –ù–æ–≤–æ–µ: –¥–ª—è child manifests –∏–∑ multi-arch
          declare -A manifest_ids

          echo "=== üè∑Ô∏è Tagged manifests ==="
          for row in $(echo "$packages_json" | jq -r '.[] | select(.metadata.container.tags | length > 0) | @base64'); do
            _jq() { echo "$row" | base64 --decode | jq -r "$1"; }

            id=$(_jq '.id')
            digest=$(_jq '.name')
            tags=$(_jq '.metadata.container.tags | join(", ")')
            created=$(_jq '.created_at')
            mediaType=$(_jq '.metadata.container.manifest.mediaType // "unknown"')

            manifest_ids[$id]=1
            protected_digests[$digest]=1

            # –ï—Å–ª–∏ —ç—Ç–æ manifest list, –¥–æ–±–∞–≤–ª—è–µ–º child digests
            if [[ "$mediaType" == "application/vnd.docker.distribution.manifest.list.v2+json" ]]; then
              echo "  üì¶ Multi-arch detected: fetching child digests for $digest"
              sub_digests_json=$(gh api -H "Accept: application/vnd.github+json" \
                /users/${PACKAGE_OWNER}/packages/container/${PACKAGE_NAME}/versions/$id \
                | jq -r '.metadata.container.manifest.manifests[].digest // empty')
              for sd in $(echo "$sub_digests_json"); do
                if [[ -n "$sd" ]]; then
                  child_digests[$sd]=1
                  protected_digests[$sd]=1  # –ó–∞—â–∏—â–∞–µ–º –∏ child
                  echo "    ‚Üí Protected child: $sd"
                fi
              done
            fi

            echo "- ID: $id | Digest: $digest | Tags: [$tags] | Created: $created | Type: manifest ($mediaType)"
          done

          echo ""
          echo "Protected child digests count: ${!child_digests[*]} (total unique: ${#child_digests[@]})"
          echo ""

          echo "=== üß© Untagged images ==="
          untagged_ids=($(echo "$packages_json" | jq -r '.[] | select(.metadata.container.tags | length == 0) | .id'))

          safe_untagged_ids=()

          for id in "${untagged_ids[@]}"; do
            data=$(gh api -H "Accept: application/vnd.github+json" \
              /users/${PACKAGE_OWNER}/packages/container/${PACKAGE_NAME}/versions/$id)
            digest=$(echo "$data" | jq -r '.name')
            created=$(echo "$data" | jq -r '.created_at')
            mediaType=$(echo "$data" | jq -r '.metadata.container.manifest.mediaType // "unknown"')

            if [[ -n "${child_digests[$digest]}" || -n "${protected_digests[$digest]}" ]]; then
              echo "- ID: $id | Digest: $digest | Created: $created | Type: $mediaType ‚Üí üõ° –ø—Ä–æ–ø—É—â–µ–Ω (child/reference)"
            else
              echo "- ID: $id | Digest: $digest | Created: $created | Type: $mediaType ‚Üí üßπ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ"
              safe_untagged_ids+=("$id")
            fi
          done

          echo ""
          if [[ "${DELETE_UNTAGGED}" == "true" && ${#safe_untagged_ids[@]} -gt 0 ]]; then
            echo "‚ö†Ô∏è Deleting ${#safe_untagged_ids[@]} truly untagged image versions..."
            for id in "${safe_untagged_ids[@]}"; do
              echo "Deleting version ID: $id ..."
              gh api -X DELETE \
                /users/${PACKAGE_OWNER}/packages/container/${PACKAGE_NAME}/versions/$id \
                && echo "‚úÖ Deleted $id" \
                || echo "‚ùå Failed to delete $id"
            done
          else
            echo "Dry-run mode (no deletions)."
            echo "Safe untagged image IDs found: ${#safe_untagged_ids[@]}"
          fi