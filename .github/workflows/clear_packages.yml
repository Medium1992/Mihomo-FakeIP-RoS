name: Cleanup untagged GHCR packages (safe multi-arch aware)

on:
  workflow_dispatch:

jobs:
  cleanup:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PACKAGE_OWNER: medium1992
      PACKAGE_NAME: mihomo-fakeip-ros
      DELETE_UNTAGGED: "false" # –£—Å—Ç–∞–Ω–æ–≤–∏ true, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —Ä–µ–∞–ª—å–Ω–æ —É–¥–∞–ª—è—Ç—å

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Analyze GHCR packages
        run: |
          set -e

          echo "Fetching package versions for ${PACKAGE_OWNER}/${PACKAGE_NAME}..."
          packages_json=$(gh api -H "Accept: application/vnd.github+json" \
            /users/${PACKAGE_OWNER}/packages/container/${PACKAGE_NAME}/versions?per_page=100)

          total=$(echo "$packages_json" | jq length)
          echo "Total versions found: $total"
          echo ""

          echo "=== üè∑Ô∏è Tagged manifests ==="
          tagged_ids=($(echo "$packages_json" | jq -r '.[] | select(.metadata.container.tags | length > 0) | .id'))
          tagged_digests=()

          for id in "${tagged_ids[@]}"; do
            data=$(gh api -H "Accept: application/vnd.github+json" \
              /users/${PACKAGE_OWNER}/packages/container/${PACKAGE_NAME}/versions/$id)
            digest=$(echo "$data" | jq -r '.name')
            tags=$(echo "$data" | jq -r '.metadata.container.tags | join(", ")')
            created=$(echo "$data" | jq -r '.created_at')
            echo "- ID: $id | Digest: $digest | Tags: [$tags] | Created: $created | Type: manifest"
            tagged_digests+=("$digest")
          done

          echo ""
          echo "=== üß© Untagged images ==="
          untagged_ids=($(echo "$packages_json" | jq -r '.[] | select(.metadata.container.tags | length == 0) | .id'))

          safe_untagged_ids=()
          for id in "${untagged_ids[@]}"; do
            data=$(gh api -H "Accept: application/vnd.github+json" \
              /users/${PACKAGE_OWNER}/packages/container/${PACKAGE_NAME}/versions/$id)
            digest=$(echo "$data" | jq -r '.name')
            created=$(echo "$data" | jq -r '.created_at')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ digest –∫ –æ–¥–Ω–æ–º—É –∏–∑ manifest‚Äô–æ–≤
            if printf '%s\n' "${tagged_digests[@]}" | grep -q "$digest"; then
              echo "- ID: $id | Digest: $digest | Created: $created | Type: manifest (child) ‚Üí üõ° –ø—Ä–æ–ø—É—â–µ–Ω"
            else
              echo "- ID: $id | Digest: $digest | Created: $created | Type: image ‚Üí üßπ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ"
              safe_untagged_ids+=("$id")
            fi
          done

          echo ""
          if [[ "${DELETE_UNTAGGED}" == "true" && ${#safe_untagged_ids[@]} -gt 0 ]]; then
            echo "‚ö†Ô∏è Deleting ${#safe_untagged_ids[@]} truly untagged image versions..."
            for id in "${safe_untagged_ids[@]}"; do
              echo "Deleting version ID: $id ..."
              gh api -X DELETE \
                /users/${PACKAGE_OWNER}/packages/container/${PACKAGE_NAME}/versions/$id \
                && echo "‚úÖ Deleted $id" \
                || echo "‚ùå Failed to delete $id"
            done
          else
            echo "Dry-run mode (no deletions)."
            echo "Safe untagged image IDs found: ${#safe_untagged_ids[@]}"
          fi
