name: Build and Publish Multi-Arch Docker Images

on:
  schedule:
    - cron: '0 0 * * *' # Ежедневно в 00:00 UTC
  workflow_dispatch: # Ручной запуск
  push:
    branches: [main]

jobs:
  check-and-build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write # Для GHCR

    steps:
      # 1. Установка jq для парсинга JSON
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # 2. Получаем последний стабильный тег из MetaCubeX/mihomo
      - name: Get latest stable mihomo tag
        id: mihomo_tag
        run: |
          # Фильтруем только стабильные теги (vX.Y.Z, без -rc, -alpha, -beta)
          MIHOMO_TAG=$(curl -s https://api.github.com/repos/MetaCubeX/mihomo/releases | \
            jq -r '[.[] | select(.prerelease == false and .draft == false and (.tag_name | test("^v[0-9]+\\.[0-9]+\\.[0-9]+$")))][0].tag_name')
          if [ -z "$MIHOMO_TAG" ]; then
            echo "No stable tag found in MetaCubeX/mihomo"
            exit 1
          fi
          echo "Latest stable mihomo tag: $MIHOMO_TAG"
          echo "MIHOMO_TAG=$MIHOMO_TAG" >> $GITHUB_OUTPUT

      # 3. Получаем текущий тег из GHCR для latest
      - name: Get current latest tag from GHCR
        id: current_tag
        run: |
          TAGS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/medium1992/mihomo-fakeip-ros/tags/list" | jq -r '.tags[]')
          # Ищем версионный тег (vX.Y.Z) среди тегов
          LATEST_VERSION_TAG=$(echo "$TAGS" | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          if [ -z "$LATEST_VERSION_TAG" ]; then
            echo "No version tag found in GHCR, assuming first build"
            echo "CURRENT_TAG=none" >> $GITHUB_OUTPUT
          else
            echo "Current latest version tag in GHCR: $LATEST_VERSION_TAG"
            echo "CURRENT_TAG=$LATEST_VERSION_TAG" >> $GITHUB_OUTPUT
          fi

      # 4. Сравниваем теги
      - name: Compare tags
        id: compare
        run: |
          MIHOMO_TAG="${{ steps.mihomo_tag.outputs.MIHOMO_TAG }}"
          CURRENT_TAG="${{ steps.current_tag.outputs.CURRENT_TAG }}"
          if [ "$CURRENT_TAG" = "none" ] || [ "$MIHOMO_TAG" != "$CURRENT_TAG" ]; then
            echo "New stable version detected: $MIHOMO_TAG (current: $CURRENT_TAG)"
            echo "BUILD=true" >> $GITHUB_OUTPUT
            echo "VERSION=$MIHOMO_TAG" >> $GITHUB_OUTPUT
          else
            echo "No new stable version. mihomo: $MIHOMO_TAG, current: $CURRENT_TAG"
            echo "BUILD=false" >> $GITHUB_OUTPUT
          fi

      # 5. Устанавливаем Docker Buildx
      - name: Set up Docker Buildx
        if: steps.compare.outputs.BUILD == 'true'
        uses: docker/setup-buildx-action@v3

      # 6. Логинимся в GHCR
      - name: Login to GitHub Container Registry
        if: steps.compare.outputs.BUILD == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 7. Логинимся в Docker Hub
      - name: Login to Docker Hub
        if: steps.compare.outputs.BUILD == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 8. Устанавливаем переменные
      - name: Set variables
        if: steps.compare.outputs.BUILD == 'true'
        id: vars
        run: |
          echo "BUILDTIME=$(date)" >> $GITHUB_OUTPUT
          echo "VERSION=${{ steps.compare.outputs.VERSION }}" >> $GITHUB_OUTPUT

      # 9. Сборка и пуш AMD64_v1
      - name: Build and push mihomo AMD64_v1
        if: steps.compare.outputs.BUILD == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./dockerfile
          platforms: linux/amd64
          push: true
          build-args: |
            TAG=${{ steps.vars.outputs.VERSION }}
            BUILDTIME=${{ steps.vars.outputs.BUILDTIME }}
            AMD64VERSION=v1
          tags: |
            ghcr.io/medium1992/mihomo-fakeip-ros:${{ steps.vars.outputs.VERSION }}-amd64_v1
            medium1992/mihomo-fakeip-ros:${{ steps.vars.outputs.VERSION }}-amd64_v1

      # 10. Сборка и пуш AMD64_v2
      - name: Build and push mihomo AMD64_v2
        if: steps.compare.outputs.BUILD == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./dockerfile
          platforms: linux/amd64
          push: true
          build-args: |
            TAG=${{ steps.vars.outputs.VERSION }}
            BUILDTIME=${{ steps.vars.outputs.BUILDTIME }}
            AMD64VERSION=v2
          tags: |
            ghcr.io/medium1992/mihomo-fakeip-ros:${{ steps.vars.outputs.VERSION }}-amd64_v2
            medium1992/mihomo-fakeip-ros:${{ steps.vars.outputs.VERSION }}-amd64_v2

      # 11. Сборка и пуш multi-arch (AMD64_v3) + latest
      - name: Build and push mihomo multi-arch
        if: steps.compare.outputs.BUILD == 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./
          file: ./dockerfile
          platforms: linux/amd64,linux/arm64,linux/arm/v7
          push: true
          build-args: |
            TAG=${{ steps.vars.outputs.VERSION }}
            BUILDTIME=${{ steps.vars.outputs.BUILDTIME }}
            AMD64VERSION=v3
          tags: |
            ghcr.io/medium1992/mihomo-fakeip-ros:latest
            ghcr.io/medium1992/mihomo-fakeip-ros:${{ steps.vars.outputs.VERSION }}
            medium1992/mihomo-fakeip-ros:latest
            medium1992/mihomo-fakeip-ros:${{ steps.vars.outputs.VERSION }}
